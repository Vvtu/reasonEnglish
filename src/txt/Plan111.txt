ReasonMl, ReasonReact - первый подход к снаряду.
Опыт практического использования.

Для всех любителей фунционального программирования,
обсудим, во что превратится ReactJS + Javascript,
и ответим на вопрос:
Будете ли более вы более продуктивны, при использовании ReasonReact вместо ReactJS ?

План:

1. Плюсы ReasonMlv
мощная система типов,
иммутабельность,
раннее связывание,
композиционные операторы, карринг,
и все классные fp штучки,

2. Плюсы ReasonReact
встроенные редьюсеры
типизированные экшионы,
типизированные пропсы
встроенный роутер,
полное отсутсвие импортов,
безопасный рефакторинг

3. Минусы ReasonMl и ReasonReact (пока есть):
хромой unicode,
отсуствие отладчика,
слабое логирование,
туллинг,
есть только промисы, ждем async await,
синтаксис может сбить с толку.


4. История: Ocaml + Haskell  =>BuckleScript=> ReasonMl, ReasonReact.
Кто, зачем и что дальше.

5. Как работает компилятор. Playground.

6. Сравнение ReasonML и Js на простых задачках.

7. Подробное описание работы над собственным проектом

Разворачивание проекта --- Reason Scripts (Aka Create-React-App).

css файлы,
statelessComponent, reducerComponent,
statelessComponentWithRetainedProps  для доступа к  (prevProps и nextProps)
LifeCycle hooks:  didMount, willReceiveProps, shouldUpdate, willUpdate, didUpdate, willUnmount

исключаем избыточные перерендеривания

бросаем экшион внутри другого экшиона
выполняем с помощью ReasonReact.SideEffects два или более актионов за один рендер

Работа c DOM, window, setTimeout.
Работа с refs.

Кастомная анимация в проекте (css transition).

8. Интеграция с ReactJs модулями и библиотеками из npm.

9. Расширение для редактора Vscode - vscode-reasonml (OCaml and Reason IDE).

10. Дебагинг: пока нету, ждем.

11. Асинхронный код: prosime.

12. Подкасты. Видео-выступления. Конференция. Комьюнити.




