1. Build a local version of OCaml compiler touch: s.h: Permission denied - Пришлось делать даунгрейд версии npm 4.0.0. - иначе не проходила установка

2. Два варианта создания стартового проекта:

	--- BuckleScript's bsb build system has an init command that generates a project template. The react theme offers a lightweight solution optimized for low learning overhead and ease of integration into an existing project.
It compiles to straightforward JS files, so you can open index.html directly from the file system. No server needed.


	--- Reason Scripts (Aka Create-React-App) As with create-react-app, reason-scripts comes with a server and hot-reloading built in.



3. Need to switch to nam 4.0.0 again - to install ocamlmerlin

3. Увидел много   <div> (ReasonReact.string(...) </div>  - многословность ReasonReact.string(

5. Размер js бандла reason React - 126 кБ. (  cra - 118 кБ)

4. Странный способ комментировать - не удобный
   Странный let в отличии от  "let in" в OCaml
   Кавычки - двойные (странно)?  - конкатенация строк  ++ - тоже многословно.
   Equal - deep Equal ?
   Integers - 32  Careful when you bind to JavaScript numbers! Long ones might be truncated. Bind JS number as float instead.

  Отличаются символы арифметических операций для целых  и плавающих чисел. "Why the heck can't I just use an overloaded + for both int and float?"

5.  Mutable Update.    Record fields can optionally be mutable. This allows you to update those fields in-place with the = operator.


6. Lists vs Arrays - Array
	let myList = [1, 2, 3];
	( in js it  [1,[2,[3]]]  - если очень много маленьких элементов в списке, то будет большой оверхед, в этом случае нужно испльзовать чистый массив  )


	Arrays are like lists, except they are:
		mutable
		fast at random access & updates
		fix-sized on native (flexibly sized on JavaScript)
		You'd surround them with [| and |].

		let myArray = [|"hello", "world", "how are you"|];


7.  Функции - как в стрелочные функции  в Js.
	- есть возможность именнованных аргументов.
	In OCaml/Reason, you can attach labels to an argument:
	let addCoordinates = (~x, ~y) => {
  	/* use x and y here */
	};

  - rec - для рекурсивных функций

	- аноноимные функции
	   /* anonymous function. Listed for completeness only */
				(x) => (y) => 1;
				/* sugar for the above */
				(x, y) => 1;
				/* assign to a name */
				let add = (x, y) => 1;

				With Type Annotation:   let add = (x: int, y: int): int => 1;



Standalone Type Signature

And In Interface Files

